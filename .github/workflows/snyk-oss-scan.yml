name: Snyk OSS Summary with PR Comment

on:
  pull_request:

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  snyk-oss-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pip-sample/requirements.txt ]; then pip install -r pip-sample/requirements.txt; fi
          if [ -f pipenv-sample/requirements.txt ]; then pip install -r pipenv-sample/requirements.txt; fi
          if [ -f pipenv-sample/requirements.txt ]; then pip install -r pipenv-sample/requirements.txt; fi

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Debug working directory
        run: |
          echo "Current directory: $PWD"
          echo "Files in repo:"
          find . -type f

      - name: Run Snyk OSS scan
        run: |
          snyk test --all-projects --json | tee snyk-oss-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Generate PR comment summary
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          const data = JSON.parse(fs.readFileSync('snyk-oss-results.json', 'utf8'));
          const severityRank = s => ({critical: 4, high: 3}[s] || 0);
          const severityIcons = { critical: 'ðŸ”´', high: 'ðŸŸ ' };
          const manifestGroups = {};
          const repoUrl = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY;
          const branch = process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME || 'main';

          const projects = Array.isArray(data) ? data : [data];

          for (const project of projects) {
            const manifest = project.displayTargetFile || project.targetFile || project.projectName || 'unknown';
            for (const vuln of project.vulnerabilities || []) {
              if (!['critical', 'high'].includes(vuln.severity)) continue;
              manifestGroups[manifest] = manifestGroups[manifest] || [];
              manifestGroups[manifest].push(vuln);
            }
          }

          let output = '<!-- SNYK_OSS_SUMMARY -->\n';
          output += '## <img src="https://cdn.brandfetch.io/id8lDQ6AMj/idG0kOimA5.svg?c=1dxbfHSJFAPEGdCLU4o5B" alt="Snyk" height="44" /> Snyk OSS Vulnerabilities by Manifest\n\n';

          const prComments = [];

          for (const file in manifestGroups) {
            const vulns = manifestGroups[file].sort((a, b) => severityRank(b.severity) - severityRank(a.severity));

            const vulnMap = new Map();
            const criticalPackages = new Set();
            const highPackages = new Set();
            let totalOccurrences = 0;

            for (const v of vulns) {
              const key = `${v.packageName}@${v.version}`;
              const severity = v.severity;
              if (!vulnMap.has(key)) {
                vulnMap.set(key, { vuln: v, count: 0, titles: new Set(), severity });
              }
              const entry = vulnMap.get(key);
              entry.count++;
              entry.titles.add(v.title);
              totalOccurrences++;

              if (severity === 'critical') criticalPackages.add(key);
              if (severity === 'high') highPackages.add(key);
            }

            let criticalCount = 0;
            let highCount = 0;
            for (const { count, severity } of vulnMap.values()) {
              if (severity === 'critical') criticalCount += count;
              if (severity === 'high') highCount += count;
            }

            const totalUniquePackages = vulnMap.size;
            const manifestLink = `${repoUrl}/blob/${branch}/${file}`;

            output += `### ðŸ“¦ [${file}](${manifestLink})  \n`;
            output += `ðŸ”´ ${criticalCount} critical vulnerability occurrences across ${criticalPackages.size} unique packages\n`;
            output += `ðŸŸ  ${highCount} high vulnerability occurrences across ${highPackages.size} unique packages\n`;
            output += `**${totalUniquePackages} total affected packages (${totalOccurrences} total issues)**\n\n`;

            output += `| Severity | Package | Dependency Type | CVSS | Occurrences | Title | Fix Available | Advisor |\n`;
            output += `|----------|---------|------------------|------|-------------|-------|---------------|---------|\n`;

            for (const [key, { vuln, count, titles, severity }] of vulnMap.entries()) {
              const icon = severityIcons[severity] || '';
              const snykUrl = vuln.id ? `https://security.snyk.io/vuln/${vuln.id}` : '';
              const pkgUrl = `https://pypi.org/project/${vuln.packageName}/${vuln.version}/`;
              const advisorUrl = `https://security.snyk.io/package/pip/${vuln.packageName}/${vuln.version}`;
              const fix = vuln.fixedIn?.[0] || 'N/A';
              const title = [...titles][0];

              let score = vuln.cvssScore || (vuln.cvssDetails?.[0]?.cvssV3BaseScore || 'N/A');
              if (typeof score === 'number') score = score.toFixed(1);

              const isTransitive = vuln.from?.length > 2;
              const type = isTransitive ? 'Transitive' : 'Direct';

              output += `| ${icon} ${severity.toUpperCase()} | [${vuln.packageName}@${vuln.version}](${pkgUrl}) | ${type} | ${score} | ${count} | [${title}](${snykUrl}) | ${fix} | [View](${advisorUrl}) |\n`;

              // Try inline comment if manifest file is touched
              try {
                const grepResult = execSync(`git diff -U0 origin/${branch} -- ${file} | grep -n '${vuln.packageName}' || true`).toString();
                if (grepResult) {
                  const line = grepResult.split(':')[0];
                  const message = `\u26a0\ufe0f **${vuln.packageName}@${vuln.version}** is vulnerable: ${title}. Fix available: ${fix}. [Details](${snykUrl})`;
                  prComments.push({ file, line, message });
                }
              } catch (e) {}
            }

            output += '\n';
          }

          if (output.trim().length < 50) {
            output += '_No critical or high vulnerabilities found._\n';
          }

          output += '\n---\n';
          output += `### \u2139\ufe0f Summary Notes\n`;
          output += '- **Dependency Type** is based on the path from your manifest to the vulnerable package (via Snykâ€™s `from[]` chain).  \n';
          output += `- **Occurrences**: Number of separate dependency paths that lead to the same vulnerable package/version.\n`;

          fs.writeFileSync('pr-comment.md', output);
          fs.writeFileSync('inline-comments.json', JSON.stringify(prComments, null, 2));
          EOF

      - name: Add summary to PR Checks tab
        run: cat pr-comment.md >> $GITHUB_STEP_SUMMARY

      - name: Edit or create Snyk PR comment
        if: github.event_name == 'pull_request'
        run: |
          COMMENT_ID=$(gh pr view "$PR_URL" --json comments -q '.comments[] | select(.body | contains("<!-- SNYK_OSS_SUMMARY -->")) | .id')
          if [ -n "$COMMENT_ID" ]; then
            gh pr comment "$PR_URL" --edit-last --body-file pr-comment.md
          else
            gh pr comment "$PR_URL" --body-file pr-comment.md
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

      - name: Comment inline on vulnerable lines
        if: github.event_name == 'pull_request'
        run: |
          COMMENTS=$(cat inline-comments.json)
          echo "$COMMENTS" | jq -c '.[]' | while read -r comment; do
            FILE=$(echo "$comment" | jq -r '.file')
            LINE=$(echo "$comment" | jq -r '.line')
            MESSAGE=$(echo "$comment" | jq -r '.message')
            gh pr comment "$PR_URL" --body "$MESSAGE" --repo "$GITHUB_REPOSITORY" --path "$FILE" --line "$LINE"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
